RData_image = imagename),
output_dir = "Results")
print("Leaving render script")
}
print('Starting drug surveillance report')
variables = 'Sample_id'
if(!is.na(Variable1)){
variables = c(variables, Variable1)
}
if(!is.na(Variable2)){
variables = c(variables, Variable2)
}
if(include_all_drug_markers){
print('including drug markers with low amplification rate')
ampseq_drug = ampseq_object_filtered
ampseq_drug@gt = cbind(ampseq_drug@gt,
ampseq_drug@discarded_loci$gt[rownames(ampseq_drug@discarded_loci$gt) %in%
rownames(ampseq_drug@gt),
grepl(paste0(gene_names, collapse = '|'),colnames(ampseq_drug@discarded_loci$gt))])
ampseq_drug@markers = rbind(ampseq_drug@markers,
ampseq_drug@discarded_loci$markers[grepl(paste0(gene_names, collapse = '|'),ampseq_drug@discarded_loci$markers$amplicon),])
}else{
ampseq_drug = ampseq_object_filtered
}
gt = ampseq_drug@gt
metadata_extracted = ampseq_drug@metadata
markers_extracted = ampseq_object@markers
ampseq_drug@metadata
source(file.path(fd,'amplseq_functions.R'))
if(Drug_Surveillance_Report){
print('Starting drug surveillance report')
variables = 'Sample_id'
if(!is.na(Variable1)){
variables = c(variables, Variable1)
}
if(!is.na(Variable2)){
variables = c(variables, Variable2)
}
if(include_all_drug_markers){
print('including drug markers with low amplification rate')
ampseq_drug = ampseq_object_filtered
ampseq_drug@gt = cbind(ampseq_drug@gt,
ampseq_drug@discarded_loci$gt[rownames(ampseq_drug@discarded_loci$gt) %in%
rownames(ampseq_drug@gt),
grepl(paste0(gene_names, collapse = '|'),colnames(ampseq_drug@discarded_loci$gt))])
ampseq_drug@markers = rbind(ampseq_drug@markers,
ampseq_drug@discarded_loci$markers[grepl(paste0(gene_names, collapse = '|'),ampseq_drug@discarded_loci$markers$amplicon),])
}else{
ampseq_drug = ampseq_object_filtered
}
gt = ampseq_drug@gt
metadata_extracted = ampseq_drug@metadata
markers_extracted = ampseq_object@markers
drug_resistant_haplotypes_plot = drug_resistant_haplotypes(gt = gt,
reference_alleles = reference_alleles,
gene_names = gene_names,
gene_ids = gene_ids,
gff_file = ref_gff,
fasta_file = ref_fasta,
variables = variables,
Longitude = Longitude,
Latitude = Latitude,
na.var.rm = na_var_rm,
na.hap.rm = na_hap_rm,
drugs = drugs,
filters = var_filter,
metadata_extracted = metadata_extracted,
markers_extracted = markers_extracted)
print('Generation of plots and tables for DRS report done')
imagename = file.path(paste0(output, '_DRS_Report.RData'))
save(file = imagename, list = c('drug_resistant_haplotypes_plot'))
system(paste0('cp ', file.path(fd, 'MHap_Analysis_DRS_Report_Template.Rmd'), ' ', file.path(paste0(output, '_DRS_Report.Rmd'))))
# Assign variables based on command-line arguments
render(file.path(paste0(output, '_DRS_Report.Rmd')), params = list(
RData_image = imagename),
output_dir = "Results")
print("Leaving render script")
}
fd = "~/Desktop/mhap_experimental/Code/"
cigar_paths = NA
#cigar_files = file.path("/Users/jar4142/Desktop/malaria_experimental/cromwell-executions/ampseq/d857623e-4cad-4ddd-b271-97eb8821fdd5/call-ampseq_pipeline/execution/Miseq_Guyana_workshop2023_NA_CIGARVariants_Bfilter.out.tsv")
cigar_files = file.path("/Users/jar4142/Desktop/MHap_Testing/4_MHap_Testing_Fourth_Plate_Guyana/CIGARVariants_Bfilter.out.tsv")
ampseq_jsonfile = NA
ampseq_excelfile = NA
output = "/Users/jar4142/Desktop/MHap_Testing/4_MHap_Testing_Fourth_Plate_Guyana/"
sample_id_pattern = "^G"
markers = file.path("/Users/jar4142/Desktop/MHap_Drive/reference/Pfal_3D7/markers.csv")
min_abd = 10
min_ratio = 0.1
sample_ampl_rate = 0.75
locus_ampl_rate = 0.75
PerformanceReport = FALSE
Drug_Surveillance_Report= TRUE
Variants_of_Interest_Report = FALSE
ref_gff = "/Users/jar4142/Desktop/MHap_Drive/reference/Pfal_3D7/PlasmoDB-59_Pfalciparum3D7.gff"
ref_fasta = "/Users/jar4142/Desktop/MHap_Drive/reference/Pfal_3D7/PlasmoDB-59_Pfalciparum3D7_Genome.fasta"
reference_alleles = "/Users/jar4142/Desktop/MHap_Drive/reference/Pfal_3D7/drugR_alleles.csv"
#metadata = file.path("/Users/jar4142/Desktop/malaria_experimental/metadata.csv")
metadata = file.path("/Users/jar4142/Desktop/MHap_Testing/4_MHap_Testing_Fourth_Plate_Guyana/guyana_metadata_cleaned_no_header_extracted.csv.csv")
join_by = "Sample_id"
Variable1 = "Geo_Level"
Variable2 = "Temp_Level"
Longitude = "Longitude"
Latitude = "Latitude"
na_hap_rm = TRUE
na_var_rm = TRUE
drugs = "Artemisinin,Chloroquine,Pyrimethamine,Sulfadoxine,Lumefantrine,Mefloquine"
drugs = strsplit(drugs, ',')[[1]]
include_all_drug_markers = TRUE
ibd_thres = NA
parallel = TRUE
ibd_ncol = 4
pop_levels = NULL
nTasks = 50
selected_checkboxes = "/Users/jar4142/Desktop/MHap_Testing/4_MHap_Testing_Fourth_Plate_Guyana/selected_checkboxes.csv"
content = readLines(selected_checkboxes)
positions <- grep("__$", content)
gene_names = content[seq(positions[1]+1, positions[2]-1, by = 1)]
gene_ids = content[seq(positions[2]+1, positions[3]-1, by = 1)]
subnational_level = content[seq(positions[3]+1, positions[4]-1, by = 1)]
period_of_collection = content[seq(positions[4]+1, length(content), by = 1)]
var_filter = c(paste(c(Variable1, paste(gsub('\\.', ' ', subnational_level), collapse = ",")), collapse = ";"),
paste(c(Variable2, paste(period_of_collection, collapse = ",")), collapse =";"))
print(paste0('var_filter: ', var_filter))
#if(file.exists(file.path(paste0(output, '.xlsx')))){
#  cigar_paths = NA
#  cigar_files = NA
#  ampseq_excelfile = file.path(paste0(output, '.xlsx'))
#}
#
print("All variables checked")
# Check packages and functions----
print("Loading libraries and functions")
source(file.path(fd,'amplseq_required_libraries.R'))
source(file.path(fd,'amplseq_functions.R'))
# Upload Cigar object and convert to ampseq object----
print("starting to upload genotypic data")
str(cigar_files)
print(file.info(cigar_files))
if(!is.na(cigar_paths)|!is.na(cigar_files)){
if(!is.na(cigar_paths)){
print("Uploading genotipic data in cigar format from multiple paths")
cigar_object = read_cigar_tables(paths = cigar_paths, sample_id_pattern = sample_id_pattern)
}else if(!is.na(cigar_files)){
if(as.logical(file.info(cigar_files)['isdir'])){
print("Uploading genotipic data in cigar format from multiple csv files from a single path")
list_of_cigar_files = file.path(cigar_files,list.files(cigar_files))
cigar_object = read_cigar_tables(files = list_of_cigar_files, sample_id_pattern = sample_id_pattern)
}else{
print("Uploading genotipic data in cigar format from a single file")
cigar_object = read_cigar_tables(files = cigar_files, sample_id_pattern = sample_id_pattern)
}
}
markers = read.csv(markers)
if(PerformanceReport){
ampseq_object = cigar2ampseq(cigar_object, markers = markers, min_abd = min_abd, min_ratio = min_ratio, remove_controls = F)
}else{
ampseq_object = cigar2ampseq(cigar_object, markers = markers, min_abd = min_abd, min_ratio = min_ratio, remove_controls = T)
}
}else if(!is.na(ampseq_jsonfile)){
print("Uploading genotipic data in ampseq format from json file")
# In development
}else if(!is.na(ampseq_excelfile)){
print("Uploading genotipic data in ampseq format from excel file")
ampseq_object = read_ampseq(file = ampseq_excelfile, format = 'excel')
}
if(PerformanceReport){
ampseq_object_filtered = ampseq_object
# # add metadata
# if(!is.na(metadata)){
#   # Upload metadata from an external source
#   metadata = read.csv(metadata)
#   # Merge the external metadata with our ampseq_object
#   ampseq_object_filtered@metadata = left_join(ampseq_object_filtered@metadata,
#                                               metadata,
#                                               by = join_by)
#   }
# # Controls
# # Coverage
# # if data was imported as cigar tables
# if(!is.na(cigar_paths)|!is.na(cigar_files)){
#   ampseq_object_filtered = filter_samples(ampseq_object, v = ampseq_object@metadata$typeofSamp == 'Samples')
# }
# # if locus_ampl_rate was provided
# if(!is.na(locus_ampl_rate)){
#   ampseq_object_filtered = locus_amplification_rate(ampseq_object_filtered, threshold = locus_ampl_rate)
# }
#
# # if sample_ampl_rate was provided
# if(!is.na(sample_ampl_rate)){
#   ampseq_object_filtered = sample_amplification_rate(ampseq_object_filtered, threshold = sample_ampl_rate)
# }
#
# # if data was imported as cigar tables and no additional steps were provided
# if(!is.na(cigar_paths)|!is.na(cigar_files) & is.na(ibd_thres)){
#   # save data in excel format
#   # write_ampseq(ampseq_object = ampseq_object_filtered,
#   #              format = 'excel',
#   #              name = file.path(wd, paste0(output, '.xlsx')))
# }
# # save performance_report.RData
}else{
ampseq_object_filtered = ampseq_object
# if locus_ampl_rate was provided
if(!is.na(locus_ampl_rate) & "loci_performance" %in% slotNames(ampseq_object_filtered)){
ampseq_object_filtered = locus_amplification_rate(ampseq_object_filtered, threshold = locus_ampl_rate)
}
# if sample_ampl_rate was provided
if(!is.na(sample_ampl_rate) & "sample_ampl_rate" %in% colnames(ampseq_object_filtered@metadata)){
ampseq_object_filtered = sample_amplification_rate(ampseq_object_filtered, threshold = sample_ampl_rate)
}
# add metadata
if(!is.na(metadata)){
# Upload metadata from an external source
print("Uploading metadata")
metadata = read.csv(metadata)
shared_variables = names(ampseq_object_filtered@metadata)[names(ampseq_object_filtered@metadata) %in% names(metadata)]
shared_variables = shared_variables[!(shared_variables %in% c('Sample_id', join_by))]
if(length(shared_variables) > 0){
print(paste0('The following variables will be overwritten: ', paste(shared_variables, collapse = ', ')))
for(variable in shared_variables){
ampseq_object_filtered@metadata[[variable]] = NULL
}
}
print("Adding metadata to ampseq object")
# Merge the external metadata with our ampseq_object
ampseq_object_filtered@metadata = left_join(ampseq_object_filtered@metadata,
metadata,
by = join_by)
print(ampseq_object_filtered@metadata$Sample_id)
}
# if data was imported as cigar tables and no additional steps were provided
#if(!is.na(cigar_paths)|!is.na(cigar_files) & is.na(ibd_thres) & !Drug_Surveillance_Report & !Variants_of_Interest_Report & !file.exists(file.path(paste0(output, '.xlsx')))){
# save data in excel format
# write_ampseq(ampseq_object = ampseq_object_filtered,
#              format = 'excel',
#              name = file.path(wd, paste0(output, '.xlsx')))
#}
}
#metadata = file.path("/Users/jar4142/Desktop/malaria_experimental/metadata.csv")
metadata = file.path("/Users/jar4142/Desktop/MHap_Testing/4_MHap_Testing_Fourth_Plate_Guyana/guyana_metadata_cleaned_no_header_extracted.csv")
if(PerformanceReport){
ampseq_object_filtered = ampseq_object
# # add metadata
# if(!is.na(metadata)){
#   # Upload metadata from an external source
#   metadata = read.csv(metadata)
#   # Merge the external metadata with our ampseq_object
#   ampseq_object_filtered@metadata = left_join(ampseq_object_filtered@metadata,
#                                               metadata,
#                                               by = join_by)
#   }
# # Controls
# # Coverage
# # if data was imported as cigar tables
# if(!is.na(cigar_paths)|!is.na(cigar_files)){
#   ampseq_object_filtered = filter_samples(ampseq_object, v = ampseq_object@metadata$typeofSamp == 'Samples')
# }
# # if locus_ampl_rate was provided
# if(!is.na(locus_ampl_rate)){
#   ampseq_object_filtered = locus_amplification_rate(ampseq_object_filtered, threshold = locus_ampl_rate)
# }
#
# # if sample_ampl_rate was provided
# if(!is.na(sample_ampl_rate)){
#   ampseq_object_filtered = sample_amplification_rate(ampseq_object_filtered, threshold = sample_ampl_rate)
# }
#
# # if data was imported as cigar tables and no additional steps were provided
# if(!is.na(cigar_paths)|!is.na(cigar_files) & is.na(ibd_thres)){
#   # save data in excel format
#   # write_ampseq(ampseq_object = ampseq_object_filtered,
#   #              format = 'excel',
#   #              name = file.path(wd, paste0(output, '.xlsx')))
# }
# # save performance_report.RData
}else{
ampseq_object_filtered = ampseq_object
# if locus_ampl_rate was provided
if(!is.na(locus_ampl_rate) & "loci_performance" %in% slotNames(ampseq_object_filtered)){
ampseq_object_filtered = locus_amplification_rate(ampseq_object_filtered, threshold = locus_ampl_rate)
}
# if sample_ampl_rate was provided
if(!is.na(sample_ampl_rate) & "sample_ampl_rate" %in% colnames(ampseq_object_filtered@metadata)){
ampseq_object_filtered = sample_amplification_rate(ampseq_object_filtered, threshold = sample_ampl_rate)
}
# add metadata
if(!is.na(metadata)){
# Upload metadata from an external source
print("Uploading metadata")
metadata = read.csv(metadata)
shared_variables = names(ampseq_object_filtered@metadata)[names(ampseq_object_filtered@metadata) %in% names(metadata)]
shared_variables = shared_variables[!(shared_variables %in% c('Sample_id', join_by))]
if(length(shared_variables) > 0){
print(paste0('The following variables will be overwritten: ', paste(shared_variables, collapse = ', ')))
for(variable in shared_variables){
ampseq_object_filtered@metadata[[variable]] = NULL
}
}
print("Adding metadata to ampseq object")
# Merge the external metadata with our ampseq_object
ampseq_object_filtered@metadata = left_join(ampseq_object_filtered@metadata,
metadata,
by = join_by)
print(ampseq_object_filtered@metadata$Sample_id)
}
# if data was imported as cigar tables and no additional steps were provided
#if(!is.na(cigar_paths)|!is.na(cigar_files) & is.na(ibd_thres) & !Drug_Surveillance_Report & !Variants_of_Interest_Report & !file.exists(file.path(paste0(output, '.xlsx')))){
# save data in excel format
# write_ampseq(ampseq_object = ampseq_object_filtered,
#              format = 'excel',
#              name = file.path(wd, paste0(output, '.xlsx')))
#}
}
if(Drug_Surveillance_Report){
print('Starting drug surveillance report')
variables = 'Sample_id'
if(!is.na(Variable1)){
variables = c(variables, Variable1)
}
if(!is.na(Variable2)){
variables = c(variables, Variable2)
}
if(include_all_drug_markers){
print('including drug markers with low amplification rate')
ampseq_drug = ampseq_object_filtered
ampseq_drug@gt = cbind(ampseq_drug@gt,
ampseq_drug@discarded_loci$gt[rownames(ampseq_drug@discarded_loci$gt) %in%
rownames(ampseq_drug@gt),
grepl(paste0(gene_names, collapse = '|'),colnames(ampseq_drug@discarded_loci$gt))])
ampseq_drug@markers = rbind(ampseq_drug@markers,
ampseq_drug@discarded_loci$markers[grepl(paste0(gene_names, collapse = '|'),ampseq_drug@discarded_loci$markers$amplicon),])
}else{
ampseq_drug = ampseq_object_filtered
}
gt = ampseq_drug@gt
metadata_extracted = ampseq_drug@metadata
markers_extracted = ampseq_object@markers
drug_resistant_haplotypes_plot = drug_resistant_haplotypes(gt = gt,
reference_alleles = reference_alleles,
gene_names = gene_names,
gene_ids = gene_ids,
gff_file = ref_gff,
fasta_file = ref_fasta,
variables = variables,
Longitude = Longitude,
Latitude = Latitude,
na.var.rm = na_var_rm,
na.hap.rm = na_hap_rm,
drugs = drugs,
filters = var_filter,
metadata_extracted = metadata_extracted,
markers_extracted = markers_extracted)
print('Generation of plots and tables for DRS report done')
imagename = file.path(paste0(output, '_DRS_Report.RData'))
save(file = imagename, list = c('drug_resistant_haplotypes_plot'))
system(paste0('cp ', file.path(fd, 'MHap_Analysis_DRS_Report_Template.Rmd'), ' ', file.path(paste0(output, '_DRS_Report.Rmd'))))
# Assign variables based on command-line arguments
render(file.path(paste0(output, '_DRS_Report.Rmd')), params = list(
RData_image = imagename),
output_dir = "Results")
print("Leaving render script")
}
source(file.path(fd,'amplseq_functions.R'))
if(Drug_Surveillance_Report){
print('Starting drug surveillance report')
variables = 'Sample_id'
if(!is.na(Variable1)){
variables = c(variables, Variable1)
}
if(!is.na(Variable2)){
variables = c(variables, Variable2)
}
if(include_all_drug_markers){
print('including drug markers with low amplification rate')
ampseq_drug = ampseq_object_filtered
ampseq_drug@gt = cbind(ampseq_drug@gt,
ampseq_drug@discarded_loci$gt[rownames(ampseq_drug@discarded_loci$gt) %in%
rownames(ampseq_drug@gt),
grepl(paste0(gene_names, collapse = '|'),colnames(ampseq_drug@discarded_loci$gt))])
ampseq_drug@markers = rbind(ampseq_drug@markers,
ampseq_drug@discarded_loci$markers[grepl(paste0(gene_names, collapse = '|'),ampseq_drug@discarded_loci$markers$amplicon),])
}else{
ampseq_drug = ampseq_object_filtered
}
gt = ampseq_drug@gt
metadata_extracted = ampseq_drug@metadata
markers_extracted = ampseq_object@markers
drug_resistant_haplotypes_plot = drug_resistant_haplotypes(gt = gt,
reference_alleles = reference_alleles,
gene_names = gene_names,
gene_ids = gene_ids,
gff_file = ref_gff,
fasta_file = ref_fasta,
variables = variables,
Longitude = Longitude,
Latitude = Latitude,
na.var.rm = na_var_rm,
na.hap.rm = na_hap_rm,
drugs = drugs,
filters = var_filter,
metadata_extracted = metadata_extracted,
markers_extracted = markers_extracted)
print('Generation of plots and tables for DRS report done')
imagename = file.path(paste0(output, '_DRS_Report.RData'))
save(file = imagename, list = c('drug_resistant_haplotypes_plot'))
system(paste0('cp ', file.path(fd, 'MHap_Analysis_DRS_Report_Template.Rmd'), ' ', file.path(paste0(output, '_DRS_Report.Rmd'))))
# Assign variables based on command-line arguments
render(file.path(paste0(output, '_DRS_Report.Rmd')), params = list(
RData_image = imagename),
output_dir = "Results")
print("Leaving render script")
}
gt
metadata_extracted[[filters[[temp_filter]][1]]] %in% strsplit(filters[[temp_filter]][2],',')[[1]]
str(gt)
str(metadata_extracted[[filters[[temp_filter]][1]]] %in% strsplit(filters[[temp_filter]][2],',')[[1]])
metadata_extracted[[filters[[temp_filter]][1]]] %in% strsplit(filters[[temp_filter]][2],',')[[1]]
metadata_extracted[[filters[[temp_filter]][1]]] %in% strsplit(filters[[temp_filter]][2],',')[[1]]
metadata_extracted[[filters[[temp_filter]][1]]] %in% strsplit(filters[[temp_filter]][2],',')[[1]]
if(Drug_Surveillance_Report){
print('Starting drug surveillance report')
variables = 'Sample_id'
if(!is.na(Variable1)){
variables = c(variables, Variable1)
}
if(!is.na(Variable2)){
variables = c(variables, Variable2)
}
if(include_all_drug_markers){
print('including drug markers with low amplification rate')
ampseq_drug = ampseq_object_filtered
ampseq_drug@gt = cbind(ampseq_drug@gt,
ampseq_drug@discarded_loci$gt[rownames(ampseq_drug@discarded_loci$gt) %in%
rownames(ampseq_drug@gt),
grepl(paste0(gene_names, collapse = '|'),colnames(ampseq_drug@discarded_loci$gt))])
ampseq_drug@markers = rbind(ampseq_drug@markers,
ampseq_drug@discarded_loci$markers[grepl(paste0(gene_names, collapse = '|'),ampseq_drug@discarded_loci$markers$amplicon),])
}else{
ampseq_drug = ampseq_object_filtered
}
gt = ampseq_drug@gt
metadata_extracted = ampseq_drug@metadata
markers_extracted = ampseq_object@markers
drug_resistant_haplotypes_plot = drug_resistant_haplotypes(gt = gt,
reference_alleles = reference_alleles,
gene_names = gene_names,
gene_ids = gene_ids,
gff_file = ref_gff,
fasta_file = ref_fasta,
variables = variables,
Longitude = Longitude,
Latitude = Latitude,
na.var.rm = na_var_rm,
na.hap.rm = na_hap_rm,
drugs = drugs,
filters = var_filter,
metadata_extracted = metadata_extracted,
markers_extracted = markers_extracted)
print('Generation of plots and tables for DRS report done')
imagename = file.path(paste0(output, '_DRS_Report.RData'))
save(file = imagename, list = c('drug_resistant_haplotypes_plot'))
system(paste0('cp ', file.path(fd, 'MHap_Analysis_DRS_Report_Template.Rmd'), ' ', file.path(paste0(output, '_DRS_Report.Rmd'))))
# Assign variables based on command-line arguments
render(file.path(paste0(output, '_DRS_Report.Rmd')), params = list(
RData_image = imagename),
output_dir = "Results")
print("Leaving render script")
}
metadata_extracted[[filters[[temp_filter]][1]]] %in% strsplit(filters[[temp_filter]][2],',')[[1]]
str(metadata_extracted[[filters[[temp_filter]][1]]] %in% strsplit(filters[[temp_filter]][2],',')[[1]])
str(gt)
View(gt)
View(metadata_extracted)
library(argparse)
library(stringr)
library(rmarkdown)
selected_checkboxes = "/Users/jar4142/Desktop/MHap_Testing/4_MHap_Testing_Fourth_Plate_Guyana/selected_checkboxes.csv"
selected_checkboxes
content = readLines(selected_checkboxes)
positions <- grep("__$", content)
content = readLines(selected_checkboxes)
content = readLines(selected_checkboxes)
content
positions <- grep("__$", content)
positions
content = readLines(selected_checkboxes)
positions <- grep("__$", content)
subnational_level = content[seq(positions[1]+1, positions[2]-1, by = 1)]
subnational_level
period_of_collection = content[seq(positions[2]+1, positions[3]-1, by = 1)]
gene_names = content[seq(positions[3]+1, positions[4]-1, by = 1)]
gene_ids = content[seq(positions[4]+1, length(content), by = 1)]
period_of_collection
gene_names
gene_ids
g
gene_ids = content[seq(positions[4]+1, positions[5]-1, by = 1)]
gene_ids
fourcast_ids = content[seq(positions[5]+1, length(content), by = 1)]
content = readLines(selected_checkboxes)
positions <- grep("__$", content)
subnational_level = content[seq(positions[1]+1, positions[2]-1, by = 1)]
period_of_collection = content[seq(positions[2]+1, positions[3]-1, by = 1)]
gene_names = content[seq(positions[3]+1, positions[4]-1, by = 1)]
gene_ids = content[seq(positions[4]+1, positions[5]-1, by = 1)]
fourcast_names = content[seq(positions[5]+1, positions[6]-1, by = 1)]
fourcast_ids = content[seq(positions[5]+1, length(content), by = 1)]
fourcast_names
fourcast_ids
fourcast_ids = content[seq(positions[6]+1, length(content), by = 1)]
fourcast_ids
